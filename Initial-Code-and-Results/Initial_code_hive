#Hive

#Create Database
hive> create table raw_reviews(json string);

#Load path to json files (Note only a subset of the original data was used here)
hive> load data inpath '/user/root/project/test_data' into table raw_reviews;

#Extract the relevant information from the json object used in the purpose of this project
hive> create table test_reviews as select get_json_object(json, "$.Content") as review_content,
get_json_object(json, "$.ReviewID") as review_id, get_json_object(json, "$.HotelInfo.Name")
as hotelName from raw_reviews;

#Create an External Table to hold the dictionary of sentiment words
hive> create external table dictionary(
    > word string,
    > polarity int)
    > ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

#Load the previously scored sentiment dictionary into the table
hive> load data inpath 'user/root/project/sentimentsWordList.txt' into table dictionary;

#Create table split_words to hold the review_content as separate words
hive> create table split_words as select review_id as id, split(review_content, ' ') as
words from test_reviews;

#Create table review_word to tokenize the words by id
hive> create table review_word as select id, word from split_words LATERAL VIEW explode(words)
w as word;

#Join review_word and dictionary
hive> create table word_join as select review_word.id, review_word.word, dictionary.polarity
from review_word LEFT OUTER JOIN dictionary ON(review_word.word = dictionary.word);

#Find how many dictionary words are in the review and sum the sentiment score
hive> select id, SUM(polarity) as rating from word_join GROUP BY word_join.id order by
rating DESC;

#Complete the Following in Hive cli to get a text copy of the above query
# hive -e 'select id, SUM(polarity) as rating from project.word_join where polarity is not
NULL GROUP BY word_join.id order by rating DESC' > sentiment_test.txt
